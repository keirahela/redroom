--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		WakeUpTransition = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		UpdateUI = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		UIInteraction = table.freeze({
			SetCallback = noop
		}),
		TriggerEffect = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		SpectateRequest = table.freeze({
			SetCallback = noop
		}),
		SpectateChanged = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ShowUI = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ShowPopup = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ShowNotification = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		SettingsChanged = table.freeze({
			SetCallback = noop
		}),
		ScreenTransition = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RoundStarting = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RoundEnded = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PurchaseCrate = table.freeze({
			SetCallback = noop
		}),
		PopupResponse = table.freeze({
			SetCallback = noop
		}),
		PlayerEliminated = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlayerDataUpdated = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		MinigameTimer = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		MinigameStarted = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		MinigameInput = table.freeze({
			SetCallback = noop
		}),
		HideUI = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		GameStateChanged = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CrateOpened = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CoinsAwarded = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local function getOrCreateUnreliableRemote(name: string): UnreliableRemoteEvent
	local remote = remotes:FindFirstChild(name)

	if remote == nil then
		remote = Instance.new("UnreliableRemoteEvent")
		remote.Name = name
		remote.Parent = remotes
	end

	return remote
end

local unreliable = { getOrCreateUnreliableRemote("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)
export type GameState = ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING")
export type UIType = ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game")
export type MinigameType = ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser")
export type CountdownData = ({
	["duration"]: (number),
	["title"]: (string),
	["description"]: (string),
})
export type MinigameData = ({
	["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
	["duration"]: (number),
	["instructions"]: (string),
	["parameters"]: ((unknown)),
})
export type NotificationData = ({
	["type"]: ("Info" | "Warning" | "Success" | "Error"),
	["title"]: (string),
	["message"]: (string),
	["duration"]: (number),
})
export type CrateReward = ({
	["name"]: (string),
	["rarity"]: (string),
	["value"]: (number),
})
export type PlayerData = ({
	["is_alive"]: (boolean),
	["is_spectating"]: (boolean),
})
export type NotificationType = ("Info" | "Warning" | "Success" | "Error")

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(6)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value, value2, value3
			local bool_1 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_1, 0b0000000000000001) then
				value = "MainMenu"
			elseif bit32.btest(bool_1, 0b0000000000000010) then
				value = "Shop"
			elseif bit32.btest(bool_1, 0b0000000000000100) then
				value = "Settings"
			elseif bit32.btest(bool_1, 0b0000000000001000) then
				value = "CrateOpening"
			elseif bit32.btest(bool_1, 0b0000000000010000) then
				value = "Spectator"
			elseif bit32.btest(bool_1, 0b0000000000100000) then
				value = "Game"
			end
			local len_1 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_1 >= 1, "value is less than 1!")
			assert(len_1 <= 120, "value is more than 120!")
			value2 = buffer.readstring(incoming_buff, read(len_1), len_1)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_1, 0b0000000001000000) then
				incoming_ipos = incoming_ipos + 1
				value3 = incoming_inst[incoming_ipos]
			else
				value3 = nil
			end
			if reliable_events[1] then
				task.spawn(reliable_events[1], player, value, value2, value3)
			end
		elseif id == 3 then
			local value
			local bool_2 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_2, 0b0000000000000001) then
				incoming_ipos = incoming_ipos + 1
				value = incoming_inst[incoming_ipos]
				assert(value == nil or value:IsA("Player"), "received instance is not of the Player class!")
			else
				value = nil
			end
			if reliable_events[3] then
				task.spawn(reliable_events[3], player, value)
			end
		elseif id == 5 then
			local value, value2
			local bool_3 = buffer.readu8(incoming_buff, read(1))
			local len_2 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_2 >= 1, "value is less than 1!")
			assert(len_2 <= 120, "value is more than 120!")
			value = buffer.readstring(incoming_buff, read(len_2), len_2)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_3, 0b0000000000000001) then
				incoming_ipos = incoming_ipos + 1
				value2 = incoming_inst[incoming_ipos]
			else
				value2 = nil
			end
			if reliable_events[5] then
				task.spawn(reliable_events[5], player, value, value2)
			end
		elseif id == 4 then
			local value
			local len_3 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_3 >= 1, "value is less than 1!")
			assert(len_3 <= 80, "value is more than 80!")
			value = buffer.readstring(incoming_buff, read(len_3), len_3)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			if reliable_events[4] then
				task.spawn(reliable_events[4], player, value)
			end
		elseif id == 2 then
			local value, value2
			local len_4 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_4 >= 1, "value is less than 1!")
			assert(len_4 <= 80, "value is more than 80!")
			value = buffer.readstring(incoming_buff, read(len_4), len_4)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			value2 = buffer.readu8(incoming_buff, read(1))
			assert(value2 >= 0, "value is less than 0!")
			assert(value2 <= 2, "value is more than 2!")
			if reliable_events[2] then
				task.spawn(reliable_events[2], player, value, value2)
			end
		elseif id == 0 then
			local value, value2
			local bool_4 = buffer.readu8(incoming_buff, read(1))
			local len_5 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_5 >= 1, "value is less than 1!")
			assert(len_5 <= 80, "value is more than 80!")
			value = buffer.readstring(incoming_buff, read(len_5), len_5)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_4, 0b0000000000000001) then
				value2 = {  }
				local len_6 = buffer.readu8(incoming_buff, read(1)) + 3
				assert(len_6 >= 3, "value is less than 3!")
				assert(len_6 <= 40, "value is more than 40!")
				value2["zone"] = buffer.readstring(incoming_buff, read(len_6), len_6)
				assert(utf8.len(value2["zone"]) ~= nil, "value is not valid utf-8")
			else
				value2 = nil
			end
			if reliable_events[0] then
				task.spawn(reliable_events[0], player, value, value2)
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	WakeUpTransition = {
		Fire = function(Player: Player, Value: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			assert(Value >= 1, "value is less than 1!")
			assert(Value <= 5, "value is more than 5!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			player_map[Player] = save()
		end,
		FireAll = function(Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			assert(Value >= 1, "value is less than 1!")
			assert(Value <= 5, "value is more than 5!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			assert(Value >= 1, "value is less than 1!")
			assert(Value <= 5, "value is more than 5!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			assert(Value >= 1, "value is less than 1!")
			assert(Value <= 5, "value is more than 5!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			assert(Value >= 1, "value is less than 1!")
			assert(Value <= 5, "value is more than 5!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	UpdateUI = {
		Fire = function(Player: Player, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown)))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local bool_5 = 0
			local bool_5_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_5 = bit32.bor(bool_5, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_5 = bit32.bor(bool_5, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_5 = bit32.bor(bool_5, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_5 = bit32.bor(bool_5, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_5 = bit32.bor(bool_5, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_5 = bit32.bor(bool_5, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_7 = #element
			assert(len_7 >= 1, "value is less than 1!")
			assert(len_7 <= 120, "value is more than 120!")
			assert(utf8.len(element) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_7 - 1)
			alloc(len_7)
			buffer.writestring(outgoing_buff, outgoing_apos, element, len_7)
			if value ~= nil then
				bool_5 = bit32.bor(bool_5, 0b0000000001000000)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_5_pos_1, bool_5)
			player_map[Player] = save()
		end,
		FireAll = function(ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local bool_6 = 0
			local bool_6_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_6 = bit32.bor(bool_6, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_6 = bit32.bor(bool_6, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_6 = bit32.bor(bool_6, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_6 = bit32.bor(bool_6, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_6 = bit32.bor(bool_6, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_6 = bit32.bor(bool_6, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_8 = #element
			assert(len_8 >= 1, "value is less than 1!")
			assert(len_8 <= 120, "value is more than 120!")
			assert(utf8.len(element) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_8 - 1)
			alloc(len_8)
			buffer.writestring(outgoing_buff, outgoing_apos, element, len_8)
			if value ~= nil then
				bool_6 = bit32.bor(bool_6, 0b0000000001000000)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_6_pos_1, bool_6)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local bool_7 = 0
			local bool_7_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_7 = bit32.bor(bool_7, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_7 = bit32.bor(bool_7, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_7 = bit32.bor(bool_7, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_7 = bit32.bor(bool_7, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_7 = bit32.bor(bool_7, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_7 = bit32.bor(bool_7, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_9 = #element
			assert(len_9 >= 1, "value is less than 1!")
			assert(len_9 <= 120, "value is more than 120!")
			assert(utf8.len(element) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_9 - 1)
			alloc(len_9)
			buffer.writestring(outgoing_buff, outgoing_apos, element, len_9)
			if value ~= nil then
				bool_7 = bit32.bor(bool_7, 0b0000000001000000)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_7_pos_1, bool_7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local bool_8 = 0
			local bool_8_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_8 = bit32.bor(bool_8, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_8 = bit32.bor(bool_8, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_8 = bit32.bor(bool_8, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_8 = bit32.bor(bool_8, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_8 = bit32.bor(bool_8, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_8 = bit32.bor(bool_8, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_10 = #element
			assert(len_10 >= 1, "value is less than 1!")
			assert(len_10 <= 120, "value is more than 120!")
			assert(utf8.len(element) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_10 - 1)
			alloc(len_10)
			buffer.writestring(outgoing_buff, outgoing_apos, element, len_10)
			if value ~= nil then
				bool_8 = bit32.bor(bool_8, 0b0000000001000000)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_8_pos_1, bool_8)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local bool_9 = 0
			local bool_9_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_9 = bit32.bor(bool_9, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_9 = bit32.bor(bool_9, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_9 = bit32.bor(bool_9, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_9 = bit32.bor(bool_9, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_9 = bit32.bor(bool_9, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_9 = bit32.bor(bool_9, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_11 = #element
			assert(len_11 >= 1, "value is less than 1!")
			assert(len_11 <= 120, "value is more than 120!")
			assert(utf8.len(element) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_11 - 1)
			alloc(len_11)
			buffer.writestring(outgoing_buff, outgoing_apos, element, len_11)
			if value ~= nil then
				bool_9 = bit32.bor(bool_9, 0b0000000001000000)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_9_pos_1, bool_9)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	UIInteraction = {
		SetCallback = function(Callback: (Player: Player, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), action: (string), data: ((unknown))) -> ()): () -> ()
			reliable_events[1] = Callback
			return function()
				reliable_events[1] = nil
			end
		end,
	},
	TriggerEffect = {
		Fire = function(Player: Player, effect_name: (string), target: ((Instance)?), data: ((unknown)))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local bool_10 = 0
			local bool_10_pos_1 = alloc(1)
			local len_12 = #effect_name
			assert(len_12 >= 1, "value is less than 1!")
			assert(len_12 <= 120, "value is more than 120!")
			assert(utf8.len(effect_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_12 - 1)
			alloc(len_12)
			buffer.writestring(outgoing_buff, outgoing_apos, effect_name, len_12)
			if target ~= nil then
				bool_10 = bit32.bor(bool_10, 0b0000000000000001)
				table.insert(outgoing_inst, target)
			end
			if data ~= nil then
				bool_10 = bit32.bor(bool_10, 0b0000000000000010)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_10_pos_1, bool_10)
			player_map[Player] = save()
		end,
		FireAll = function(effect_name: (string), target: ((Instance)?), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local bool_11 = 0
			local bool_11_pos_1 = alloc(1)
			local len_13 = #effect_name
			assert(len_13 >= 1, "value is less than 1!")
			assert(len_13 <= 120, "value is more than 120!")
			assert(utf8.len(effect_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_13 - 1)
			alloc(len_13)
			buffer.writestring(outgoing_buff, outgoing_apos, effect_name, len_13)
			if target ~= nil then
				bool_11 = bit32.bor(bool_11, 0b0000000000000001)
				table.insert(outgoing_inst, target)
			end
			if data ~= nil then
				bool_11 = bit32.bor(bool_11, 0b0000000000000010)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_11_pos_1, bool_11)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, effect_name: (string), target: ((Instance)?), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local bool_12 = 0
			local bool_12_pos_1 = alloc(1)
			local len_14 = #effect_name
			assert(len_14 >= 1, "value is less than 1!")
			assert(len_14 <= 120, "value is more than 120!")
			assert(utf8.len(effect_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_14 - 1)
			alloc(len_14)
			buffer.writestring(outgoing_buff, outgoing_apos, effect_name, len_14)
			if target ~= nil then
				bool_12 = bit32.bor(bool_12, 0b0000000000000001)
				table.insert(outgoing_inst, target)
			end
			if data ~= nil then
				bool_12 = bit32.bor(bool_12, 0b0000000000000010)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_12_pos_1, bool_12)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, effect_name: (string), target: ((Instance)?), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local bool_13 = 0
			local bool_13_pos_1 = alloc(1)
			local len_15 = #effect_name
			assert(len_15 >= 1, "value is less than 1!")
			assert(len_15 <= 120, "value is more than 120!")
			assert(utf8.len(effect_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_15 - 1)
			alloc(len_15)
			buffer.writestring(outgoing_buff, outgoing_apos, effect_name, len_15)
			if target ~= nil then
				bool_13 = bit32.bor(bool_13, 0b0000000000000001)
				table.insert(outgoing_inst, target)
			end
			if data ~= nil then
				bool_13 = bit32.bor(bool_13, 0b0000000000000010)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_13_pos_1, bool_13)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, effect_name: (string), target: ((Instance)?), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local bool_14 = 0
			local bool_14_pos_1 = alloc(1)
			local len_16 = #effect_name
			assert(len_16 >= 1, "value is less than 1!")
			assert(len_16 <= 120, "value is more than 120!")
			assert(utf8.len(effect_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_16 - 1)
			alloc(len_16)
			buffer.writestring(outgoing_buff, outgoing_apos, effect_name, len_16)
			if target ~= nil then
				bool_14 = bit32.bor(bool_14, 0b0000000000000001)
				table.insert(outgoing_inst, target)
			end
			if data ~= nil then
				bool_14 = bit32.bor(bool_14, 0b0000000000000010)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_14_pos_1, bool_14)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	SpectateRequest = {
		SetCallback = function(Callback: (Player: Player, Value: ((Player)?)) -> ()): () -> ()
			reliable_events[3] = Callback
			return function()
				reliable_events[3] = nil
			end
		end,
	},
	SpectateChanged = {
		Fire = function(Player: Player, spectator: (Player), target: ((Player)?))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			local bool_15 = 0
			local bool_15_pos_1 = alloc(1)
			assert(spectator:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, spectator)
			if target ~= nil then
				bool_15 = bit32.bor(bool_15, 0b0000000000000001)
				assert(target:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, target)
			end
			buffer.writeu8(outgoing_buff, bool_15_pos_1, bool_15)
			player_map[Player] = save()
		end,
		FireAll = function(spectator: (Player), target: ((Player)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			local bool_16 = 0
			local bool_16_pos_1 = alloc(1)
			assert(spectator:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, spectator)
			if target ~= nil then
				bool_16 = bit32.bor(bool_16, 0b0000000000000001)
				assert(target:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, target)
			end
			buffer.writeu8(outgoing_buff, bool_16_pos_1, bool_16)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, spectator: (Player), target: ((Player)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			local bool_17 = 0
			local bool_17_pos_1 = alloc(1)
			assert(spectator:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, spectator)
			if target ~= nil then
				bool_17 = bit32.bor(bool_17, 0b0000000000000001)
				assert(target:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, target)
			end
			buffer.writeu8(outgoing_buff, bool_17_pos_1, bool_17)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, spectator: (Player), target: ((Player)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			local bool_18 = 0
			local bool_18_pos_1 = alloc(1)
			assert(spectator:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, spectator)
			if target ~= nil then
				bool_18 = bit32.bor(bool_18, 0b0000000000000001)
				assert(target:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, target)
			end
			buffer.writeu8(outgoing_buff, bool_18_pos_1, bool_18)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, spectator: (Player), target: ((Player)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			local bool_19 = 0
			local bool_19_pos_1 = alloc(1)
			assert(spectator:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, spectator)
			if target ~= nil then
				bool_19 = bit32.bor(bool_19, 0b0000000000000001)
				assert(target:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, target)
			end
			buffer.writeu8(outgoing_buff, bool_19_pos_1, bool_19)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ShowUI = {
		Fire = function(Player: Player, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown)))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_20 = 0
			local bool_20_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_20 = bit32.bor(bool_20, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_20 = bit32.bor(bool_20, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_20 = bit32.bor(bool_20, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_20 = bit32.bor(bool_20, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_20 = bit32.bor(bool_20, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_20 = bit32.bor(bool_20, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			if data ~= nil then
				bool_20 = bit32.bor(bool_20, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_20_pos_1, bool_20)
			player_map[Player] = save()
		end,
		FireAll = function(ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_21 = 0
			local bool_21_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_21 = bit32.bor(bool_21, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_21 = bit32.bor(bool_21, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_21 = bit32.bor(bool_21, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_21 = bit32.bor(bool_21, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_21 = bit32.bor(bool_21, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_21 = bit32.bor(bool_21, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			if data ~= nil then
				bool_21 = bit32.bor(bool_21, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_21_pos_1, bool_21)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_22 = 0
			local bool_22_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_22 = bit32.bor(bool_22, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_22 = bit32.bor(bool_22, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_22 = bit32.bor(bool_22, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_22 = bit32.bor(bool_22, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_22 = bit32.bor(bool_22, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_22 = bit32.bor(bool_22, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			if data ~= nil then
				bool_22 = bit32.bor(bool_22, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_22_pos_1, bool_22)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_23 = 0
			local bool_23_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_23 = bit32.bor(bool_23, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_23 = bit32.bor(bool_23, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_23 = bit32.bor(bool_23, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_23 = bit32.bor(bool_23, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_23 = bit32.bor(bool_23, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_23 = bit32.bor(bool_23, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			if data ~= nil then
				bool_23 = bit32.bor(bool_23, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_23_pos_1, bool_23)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown)))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local bool_24 = 0
			local bool_24_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_24 = bit32.bor(bool_24, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_24 = bit32.bor(bool_24, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_24 = bit32.bor(bool_24, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_24 = bit32.bor(bool_24, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_24 = bit32.bor(bool_24, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_24 = bit32.bor(bool_24, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			if data ~= nil then
				bool_24 = bit32.bor(bool_24, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_24_pos_1, bool_24)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ShowPopup = {
		Fire = function(Player: Player, title: (string), message: (string), buttons: ({ (string) }))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			local len_17 = #title
			assert(len_17 >= 1, "value is less than 1!")
			assert(len_17 <= 200, "value is more than 200!")
			assert(utf8.len(title) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_17 - 1)
			alloc(len_17)
			buffer.writestring(outgoing_buff, outgoing_apos, title, len_17)
			local len_18 = #message
			assert(len_18 >= 1, "value is less than 1!")
			assert(len_18 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_18 - 1)
			alloc(len_18)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_18)
			local len_19 = #buttons
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_19)
			for i_1 = 1, len_19 do
				local val_1 = buttons[i_1]
				local len_20 = #val_1
				assert(utf8.len(val_1) ~= nil, "value is not valid utf-8")
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_20)
				alloc(len_20)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_20)
			end
			player_map[Player] = save()
		end,
		FireAll = function(title: (string), message: (string), buttons: ({ (string) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			local len_21 = #title
			assert(len_21 >= 1, "value is less than 1!")
			assert(len_21 <= 200, "value is more than 200!")
			assert(utf8.len(title) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_21 - 1)
			alloc(len_21)
			buffer.writestring(outgoing_buff, outgoing_apos, title, len_21)
			local len_22 = #message
			assert(len_22 >= 1, "value is less than 1!")
			assert(len_22 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_22 - 1)
			alloc(len_22)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_22)
			local len_23 = #buttons
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_23)
			for i_2 = 1, len_23 do
				local val_2 = buttons[i_2]
				local len_24 = #val_2
				assert(utf8.len(val_2) ~= nil, "value is not valid utf-8")
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
				alloc(len_24)
				buffer.writestring(outgoing_buff, outgoing_apos, val_2, len_24)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, title: (string), message: (string), buttons: ({ (string) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			local len_25 = #title
			assert(len_25 >= 1, "value is less than 1!")
			assert(len_25 <= 200, "value is more than 200!")
			assert(utf8.len(title) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_25 - 1)
			alloc(len_25)
			buffer.writestring(outgoing_buff, outgoing_apos, title, len_25)
			local len_26 = #message
			assert(len_26 >= 1, "value is less than 1!")
			assert(len_26 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_26 - 1)
			alloc(len_26)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_26)
			local len_27 = #buttons
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_27)
			for i_3 = 1, len_27 do
				local val_3 = buttons[i_3]
				local len_28 = #val_3
				assert(utf8.len(val_3) ~= nil, "value is not valid utf-8")
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_28)
				alloc(len_28)
				buffer.writestring(outgoing_buff, outgoing_apos, val_3, len_28)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, title: (string), message: (string), buttons: ({ (string) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			local len_29 = #title
			assert(len_29 >= 1, "value is less than 1!")
			assert(len_29 <= 200, "value is more than 200!")
			assert(utf8.len(title) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_29 - 1)
			alloc(len_29)
			buffer.writestring(outgoing_buff, outgoing_apos, title, len_29)
			local len_30 = #message
			assert(len_30 >= 1, "value is less than 1!")
			assert(len_30 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_30 - 1)
			alloc(len_30)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_30)
			local len_31 = #buttons
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_31)
			for i_4 = 1, len_31 do
				local val_4 = buttons[i_4]
				local len_32 = #val_4
				assert(utf8.len(val_4) ~= nil, "value is not valid utf-8")
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_32)
				alloc(len_32)
				buffer.writestring(outgoing_buff, outgoing_apos, val_4, len_32)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, title: (string), message: (string), buttons: ({ (string) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			local len_33 = #title
			assert(len_33 >= 1, "value is less than 1!")
			assert(len_33 <= 200, "value is more than 200!")
			assert(utf8.len(title) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_33 - 1)
			alloc(len_33)
			buffer.writestring(outgoing_buff, outgoing_apos, title, len_33)
			local len_34 = #message
			assert(len_34 >= 1, "value is less than 1!")
			assert(len_34 <= 800, "value is more than 800!")
			assert(utf8.len(message) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_34 - 1)
			alloc(len_34)
			buffer.writestring(outgoing_buff, outgoing_apos, message, len_34)
			local len_35 = #buttons
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_35)
			for i_5 = 1, len_35 do
				local val_5 = buttons[i_5]
				local len_36 = #val_5
				assert(utf8.len(val_5) ~= nil, "value is not valid utf-8")
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_36)
				alloc(len_36)
				buffer.writestring(outgoing_buff, outgoing_apos, val_5, len_36)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	ShowNotification = {
		Fire = function(Player: Player, Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local bool_25 = 0
			local bool_25_pos_1 = alloc(1)
			if Value["type"] == "Info" then
				bool_25 = bit32.bor(bool_25, 0b0000000000000001)
			elseif Value["type"] == "Warning" then
				bool_25 = bit32.bor(bool_25, 0b0000000000000010)
			elseif Value["type"] == "Success" then
				bool_25 = bit32.bor(bool_25, 0b0000000000000100)
			elseif Value["type"] == "Error" then
				bool_25 = bit32.bor(bool_25, 0b0000000000001000)
			else
				error("Invalid enumerator")
			end
			local len_37 = #Value["title"]
			assert(len_37 >= 1, "value is less than 1!")
			assert(len_37 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_37 - 1)
			alloc(len_37)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_37)
			local len_38 = #Value["message"]
			assert(len_38 >= 1, "value is less than 1!")
			assert(len_38 <= 800, "value is more than 800!")
			assert(utf8.len(Value["message"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_38 - 1)
			alloc(len_38)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["message"], len_38)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 30, "value is more than 30!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			buffer.writeu8(outgoing_buff, bool_25_pos_1, bool_25)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local bool_26 = 0
			local bool_26_pos_1 = alloc(1)
			if Value["type"] == "Info" then
				bool_26 = bit32.bor(bool_26, 0b0000000000000001)
			elseif Value["type"] == "Warning" then
				bool_26 = bit32.bor(bool_26, 0b0000000000000010)
			elseif Value["type"] == "Success" then
				bool_26 = bit32.bor(bool_26, 0b0000000000000100)
			elseif Value["type"] == "Error" then
				bool_26 = bit32.bor(bool_26, 0b0000000000001000)
			else
				error("Invalid enumerator")
			end
			local len_39 = #Value["title"]
			assert(len_39 >= 1, "value is less than 1!")
			assert(len_39 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_39 - 1)
			alloc(len_39)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_39)
			local len_40 = #Value["message"]
			assert(len_40 >= 1, "value is less than 1!")
			assert(len_40 <= 800, "value is more than 800!")
			assert(utf8.len(Value["message"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_40 - 1)
			alloc(len_40)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["message"], len_40)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 30, "value is more than 30!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			buffer.writeu8(outgoing_buff, bool_26_pos_1, bool_26)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local bool_27 = 0
			local bool_27_pos_1 = alloc(1)
			if Value["type"] == "Info" then
				bool_27 = bit32.bor(bool_27, 0b0000000000000001)
			elseif Value["type"] == "Warning" then
				bool_27 = bit32.bor(bool_27, 0b0000000000000010)
			elseif Value["type"] == "Success" then
				bool_27 = bit32.bor(bool_27, 0b0000000000000100)
			elseif Value["type"] == "Error" then
				bool_27 = bit32.bor(bool_27, 0b0000000000001000)
			else
				error("Invalid enumerator")
			end
			local len_41 = #Value["title"]
			assert(len_41 >= 1, "value is less than 1!")
			assert(len_41 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_41 - 1)
			alloc(len_41)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_41)
			local len_42 = #Value["message"]
			assert(len_42 >= 1, "value is less than 1!")
			assert(len_42 <= 800, "value is more than 800!")
			assert(utf8.len(Value["message"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_42 - 1)
			alloc(len_42)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["message"], len_42)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 30, "value is more than 30!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			buffer.writeu8(outgoing_buff, bool_27_pos_1, bool_27)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local bool_28 = 0
			local bool_28_pos_1 = alloc(1)
			if Value["type"] == "Info" then
				bool_28 = bit32.bor(bool_28, 0b0000000000000001)
			elseif Value["type"] == "Warning" then
				bool_28 = bit32.bor(bool_28, 0b0000000000000010)
			elseif Value["type"] == "Success" then
				bool_28 = bit32.bor(bool_28, 0b0000000000000100)
			elseif Value["type"] == "Error" then
				bool_28 = bit32.bor(bool_28, 0b0000000000001000)
			else
				error("Invalid enumerator")
			end
			local len_43 = #Value["title"]
			assert(len_43 >= 1, "value is less than 1!")
			assert(len_43 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_43 - 1)
			alloc(len_43)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_43)
			local len_44 = #Value["message"]
			assert(len_44 >= 1, "value is less than 1!")
			assert(len_44 <= 800, "value is more than 800!")
			assert(utf8.len(Value["message"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_44 - 1)
			alloc(len_44)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["message"], len_44)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 30, "value is more than 30!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			buffer.writeu8(outgoing_buff, bool_28_pos_1, bool_28)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local bool_29 = 0
			local bool_29_pos_1 = alloc(1)
			if Value["type"] == "Info" then
				bool_29 = bit32.bor(bool_29, 0b0000000000000001)
			elseif Value["type"] == "Warning" then
				bool_29 = bit32.bor(bool_29, 0b0000000000000010)
			elseif Value["type"] == "Success" then
				bool_29 = bit32.bor(bool_29, 0b0000000000000100)
			elseif Value["type"] == "Error" then
				bool_29 = bit32.bor(bool_29, 0b0000000000001000)
			else
				error("Invalid enumerator")
			end
			local len_45 = #Value["title"]
			assert(len_45 >= 1, "value is less than 1!")
			assert(len_45 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_45 - 1)
			alloc(len_45)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_45)
			local len_46 = #Value["message"]
			assert(len_46 >= 1, "value is less than 1!")
			assert(len_46 <= 800, "value is more than 800!")
			assert(utf8.len(Value["message"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_46 - 1)
			alloc(len_46)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["message"], len_46)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 30, "value is more than 30!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			buffer.writeu8(outgoing_buff, bool_29_pos_1, bool_29)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	SettingsChanged = {
		SetCallback = function(Callback: (Player: Player, setting_name: (string), value: ((unknown))) -> ()): () -> ()
			reliable_events[5] = Callback
			return function()
				reliable_events[5] = nil
			end
		end,
	},
	ScreenTransition = {
		Fire = function(Player: Player, transition_type: (string), duration: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			local len_47 = #transition_type
			assert(len_47 >= 1, "value is less than 1!")
			assert(len_47 <= 80, "value is more than 80!")
			assert(utf8.len(transition_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_47 - 1)
			alloc(len_47)
			buffer.writestring(outgoing_buff, outgoing_apos, transition_type, len_47)
			assert(duration >= 1, "value is less than 1!")
			assert(duration <= 10, "value is more than 10!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, duration)
			player_map[Player] = save()
		end,
		FireAll = function(transition_type: (string), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			local len_48 = #transition_type
			assert(len_48 >= 1, "value is less than 1!")
			assert(len_48 <= 80, "value is more than 80!")
			assert(utf8.len(transition_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_48 - 1)
			alloc(len_48)
			buffer.writestring(outgoing_buff, outgoing_apos, transition_type, len_48)
			assert(duration >= 1, "value is less than 1!")
			assert(duration <= 10, "value is more than 10!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, transition_type: (string), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			local len_49 = #transition_type
			assert(len_49 >= 1, "value is less than 1!")
			assert(len_49 <= 80, "value is more than 80!")
			assert(utf8.len(transition_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_49 - 1)
			alloc(len_49)
			buffer.writestring(outgoing_buff, outgoing_apos, transition_type, len_49)
			assert(duration >= 1, "value is less than 1!")
			assert(duration <= 10, "value is more than 10!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, transition_type: (string), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			local len_50 = #transition_type
			assert(len_50 >= 1, "value is less than 1!")
			assert(len_50 <= 80, "value is more than 80!")
			assert(utf8.len(transition_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_50 - 1)
			alloc(len_50)
			buffer.writestring(outgoing_buff, outgoing_apos, transition_type, len_50)
			assert(duration >= 1, "value is less than 1!")
			assert(duration <= 10, "value is more than 10!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, transition_type: (string), duration: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			local len_51 = #transition_type
			assert(len_51 >= 1, "value is less than 1!")
			assert(len_51 <= 80, "value is more than 80!")
			assert(utf8.len(transition_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_51 - 1)
			alloc(len_51)
			buffer.writestring(outgoing_buff, outgoing_apos, transition_type, len_51)
			assert(duration >= 1, "value is less than 1!")
			assert(duration <= 10, "value is more than 10!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, duration)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RoundStarting = {
		Fire = function(Player: Player, Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 60, "value is more than 60!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_52 = #Value["title"]
			assert(len_52 >= 1, "value is less than 1!")
			assert(len_52 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_52 - 1)
			alloc(len_52)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_52)
			local len_53 = #Value["description"]
			assert(len_53 >= 0, "value is less than 0!")
			assert(len_53 <= 400, "value is more than 400!")
			assert(utf8.len(Value["description"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_53)
			alloc(len_53)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["description"], len_53)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 60, "value is more than 60!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_54 = #Value["title"]
			assert(len_54 >= 1, "value is less than 1!")
			assert(len_54 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_54 - 1)
			alloc(len_54)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_54)
			local len_55 = #Value["description"]
			assert(len_55 >= 0, "value is less than 0!")
			assert(len_55 <= 400, "value is more than 400!")
			assert(utf8.len(Value["description"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_55)
			alloc(len_55)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["description"], len_55)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 60, "value is more than 60!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_56 = #Value["title"]
			assert(len_56 >= 1, "value is less than 1!")
			assert(len_56 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_56 - 1)
			alloc(len_56)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_56)
			local len_57 = #Value["description"]
			assert(len_57 >= 0, "value is less than 0!")
			assert(len_57 <= 400, "value is more than 400!")
			assert(utf8.len(Value["description"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_57)
			alloc(len_57)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["description"], len_57)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 60, "value is more than 60!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_58 = #Value["title"]
			assert(len_58 >= 1, "value is less than 1!")
			assert(len_58 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_58 - 1)
			alloc(len_58)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_58)
			local len_59 = #Value["description"]
			assert(len_59 >= 0, "value is less than 0!")
			assert(len_59 <= 400, "value is more than 400!")
			assert(utf8.len(Value["description"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_59)
			alloc(len_59)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["description"], len_59)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 60, "value is more than 60!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_60 = #Value["title"]
			assert(len_60 >= 1, "value is less than 1!")
			assert(len_60 <= 200, "value is more than 200!")
			assert(utf8.len(Value["title"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_60 - 1)
			alloc(len_60)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["title"], len_60)
			local len_61 = #Value["description"]
			assert(len_61 >= 0, "value is less than 0!")
			assert(len_61 <= 400, "value is more than 400!")
			assert(utf8.len(Value["description"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_61)
			alloc(len_61)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["description"], len_61)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RoundEnded = {
		Fire = function(Player: Player, winner_count: (number), coins_awarded: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, winner_count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, coins_awarded)
			player_map[Player] = save()
		end,
		FireAll = function(winner_count: (number), coins_awarded: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, winner_count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, coins_awarded)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, winner_count: (number), coins_awarded: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, winner_count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, coins_awarded)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, winner_count: (number), coins_awarded: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, winner_count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, coins_awarded)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, winner_count: (number), coins_awarded: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, winner_count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, coins_awarded)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	PurchaseCrate = {
		SetCallback = function(Callback: (Player: Player, Value: (string)) -> ()): () -> ()
			reliable_events[4] = Callback
			return function()
				reliable_events[4] = nil
			end
		end,
	},
	PopupResponse = {
		SetCallback = function(Callback: (Player: Player, popup_id: (string), button_index: (number)) -> ()): () -> ()
			reliable_events[2] = Callback
			return function()
				reliable_events[2] = nil
			end
		end,
	},
	PlayerEliminated = {
		Fire = function(Player: Player, player: (Player), reason: (string))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_62 = #reason
			assert(len_62 >= 1, "value is less than 1!")
			assert(len_62 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_62 - 1)
			alloc(len_62)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_62)
			player_map[Player] = save()
		end,
		FireAll = function(player: (Player), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_63 = #reason
			assert(len_63 >= 1, "value is less than 1!")
			assert(len_63 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_63 - 1)
			alloc(len_63)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_63)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Player), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_64 = #reason
			assert(len_64 >= 1, "value is less than 1!")
			assert(len_64 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_64 - 1)
			alloc(len_64)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_64)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Player), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_65 = #reason
			assert(len_65 >= 1, "value is less than 1!")
			assert(len_65 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_65 - 1)
			alloc(len_65)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_65)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Player), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_66 = #reason
			assert(len_66 >= 1, "value is less than 1!")
			assert(len_66 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_66 - 1)
			alloc(len_66)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_66)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	PlayerDataUpdated = {
		Fire = function(Player: Player, player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local bool_30 = 0
			local bool_30_pos_1 = alloc(1)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			if data["is_alive"] then
				bool_30 = bit32.bor(bool_30, 0b0000000000000001)
			end
			if data["is_spectating"] then
				bool_30 = bit32.bor(bool_30, 0b0000000000000010)
			end
			buffer.writeu8(outgoing_buff, bool_30_pos_1, bool_30)
			player_map[Player] = save()
		end,
		FireAll = function(player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local bool_31 = 0
			local bool_31_pos_1 = alloc(1)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			if data["is_alive"] then
				bool_31 = bit32.bor(bool_31, 0b0000000000000001)
			end
			if data["is_spectating"] then
				bool_31 = bit32.bor(bool_31, 0b0000000000000010)
			end
			buffer.writeu8(outgoing_buff, bool_31_pos_1, bool_31)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local bool_32 = 0
			local bool_32_pos_1 = alloc(1)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			if data["is_alive"] then
				bool_32 = bit32.bor(bool_32, 0b0000000000000001)
			end
			if data["is_spectating"] then
				bool_32 = bit32.bor(bool_32, 0b0000000000000010)
			end
			buffer.writeu8(outgoing_buff, bool_32_pos_1, bool_32)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local bool_33 = 0
			local bool_33_pos_1 = alloc(1)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			if data["is_alive"] then
				bool_33 = bit32.bor(bool_33, 0b0000000000000001)
			end
			if data["is_spectating"] then
				bool_33 = bit32.bor(bool_33, 0b0000000000000010)
			end
			buffer.writeu8(outgoing_buff, bool_33_pos_1, bool_33)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local bool_34 = 0
			local bool_34_pos_1 = alloc(1)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			if data["is_alive"] then
				bool_34 = bit32.bor(bool_34, 0b0000000000000001)
			end
			if data["is_spectating"] then
				bool_34 = bit32.bor(bool_34, 0b0000000000000010)
			end
			buffer.writeu8(outgoing_buff, bool_34_pos_1, bool_34)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	MinigameTimer = {
		Fire = function(Player: Player, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable[1]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	MinigameStarted = {
		Fire = function(Player: Player, Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local bool_35 = 0
			local bool_35_pos_1 = alloc(1)
			if Value["type"] == "Maze" then
				bool_35 = bit32.bor(bool_35, 0b0000000000000001)
			elseif Value["type"] == "HigherLower" then
				bool_35 = bit32.bor(bool_35, 0b0000000000000010)
			elseif Value["type"] == "Blackjack" then
				bool_35 = bit32.bor(bool_35, 0b0000000000000100)
			elseif Value["type"] == "RatRace" then
				bool_35 = bit32.bor(bool_35, 0b0000000000001000)
			elseif Value["type"] == "React" then
				bool_35 = bit32.bor(bool_35, 0b0000000000010000)
			elseif Value["type"] == "BombGuesser" then
				bool_35 = bit32.bor(bool_35, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 120, "value is more than 120!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_67 = #Value["instructions"]
			assert(len_67 >= 1, "value is less than 1!")
			assert(len_67 <= 2000, "value is more than 2000!")
			assert(utf8.len(Value["instructions"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_67 - 1)
			alloc(len_67)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["instructions"], len_67)
			if Value["parameters"] ~= nil then
				bool_35 = bit32.bor(bool_35, 0b0000000001000000)
				table.insert(outgoing_inst, Value["parameters"])
			end
			buffer.writeu8(outgoing_buff, bool_35_pos_1, bool_35)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local bool_36 = 0
			local bool_36_pos_1 = alloc(1)
			if Value["type"] == "Maze" then
				bool_36 = bit32.bor(bool_36, 0b0000000000000001)
			elseif Value["type"] == "HigherLower" then
				bool_36 = bit32.bor(bool_36, 0b0000000000000010)
			elseif Value["type"] == "Blackjack" then
				bool_36 = bit32.bor(bool_36, 0b0000000000000100)
			elseif Value["type"] == "RatRace" then
				bool_36 = bit32.bor(bool_36, 0b0000000000001000)
			elseif Value["type"] == "React" then
				bool_36 = bit32.bor(bool_36, 0b0000000000010000)
			elseif Value["type"] == "BombGuesser" then
				bool_36 = bit32.bor(bool_36, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 120, "value is more than 120!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_68 = #Value["instructions"]
			assert(len_68 >= 1, "value is less than 1!")
			assert(len_68 <= 2000, "value is more than 2000!")
			assert(utf8.len(Value["instructions"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_68 - 1)
			alloc(len_68)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["instructions"], len_68)
			if Value["parameters"] ~= nil then
				bool_36 = bit32.bor(bool_36, 0b0000000001000000)
				table.insert(outgoing_inst, Value["parameters"])
			end
			buffer.writeu8(outgoing_buff, bool_36_pos_1, bool_36)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local bool_37 = 0
			local bool_37_pos_1 = alloc(1)
			if Value["type"] == "Maze" then
				bool_37 = bit32.bor(bool_37, 0b0000000000000001)
			elseif Value["type"] == "HigherLower" then
				bool_37 = bit32.bor(bool_37, 0b0000000000000010)
			elseif Value["type"] == "Blackjack" then
				bool_37 = bit32.bor(bool_37, 0b0000000000000100)
			elseif Value["type"] == "RatRace" then
				bool_37 = bit32.bor(bool_37, 0b0000000000001000)
			elseif Value["type"] == "React" then
				bool_37 = bit32.bor(bool_37, 0b0000000000010000)
			elseif Value["type"] == "BombGuesser" then
				bool_37 = bit32.bor(bool_37, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 120, "value is more than 120!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_69 = #Value["instructions"]
			assert(len_69 >= 1, "value is less than 1!")
			assert(len_69 <= 2000, "value is more than 2000!")
			assert(utf8.len(Value["instructions"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_69 - 1)
			alloc(len_69)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["instructions"], len_69)
			if Value["parameters"] ~= nil then
				bool_37 = bit32.bor(bool_37, 0b0000000001000000)
				table.insert(outgoing_inst, Value["parameters"])
			end
			buffer.writeu8(outgoing_buff, bool_37_pos_1, bool_37)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local bool_38 = 0
			local bool_38_pos_1 = alloc(1)
			if Value["type"] == "Maze" then
				bool_38 = bit32.bor(bool_38, 0b0000000000000001)
			elseif Value["type"] == "HigherLower" then
				bool_38 = bit32.bor(bool_38, 0b0000000000000010)
			elseif Value["type"] == "Blackjack" then
				bool_38 = bit32.bor(bool_38, 0b0000000000000100)
			elseif Value["type"] == "RatRace" then
				bool_38 = bit32.bor(bool_38, 0b0000000000001000)
			elseif Value["type"] == "React" then
				bool_38 = bit32.bor(bool_38, 0b0000000000010000)
			elseif Value["type"] == "BombGuesser" then
				bool_38 = bit32.bor(bool_38, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 120, "value is more than 120!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_70 = #Value["instructions"]
			assert(len_70 >= 1, "value is less than 1!")
			assert(len_70 <= 2000, "value is more than 2000!")
			assert(utf8.len(Value["instructions"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_70 - 1)
			alloc(len_70)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["instructions"], len_70)
			if Value["parameters"] ~= nil then
				bool_38 = bit32.bor(bool_38, 0b0000000001000000)
				table.insert(outgoing_inst, Value["parameters"])
			end
			buffer.writeu8(outgoing_buff, bool_38_pos_1, bool_38)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local bool_39 = 0
			local bool_39_pos_1 = alloc(1)
			if Value["type"] == "Maze" then
				bool_39 = bit32.bor(bool_39, 0b0000000000000001)
			elseif Value["type"] == "HigherLower" then
				bool_39 = bit32.bor(bool_39, 0b0000000000000010)
			elseif Value["type"] == "Blackjack" then
				bool_39 = bit32.bor(bool_39, 0b0000000000000100)
			elseif Value["type"] == "RatRace" then
				bool_39 = bit32.bor(bool_39, 0b0000000000001000)
			elseif Value["type"] == "React" then
				bool_39 = bit32.bor(bool_39, 0b0000000000010000)
			elseif Value["type"] == "BombGuesser" then
				bool_39 = bit32.bor(bool_39, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			assert(Value["duration"] >= 1, "value is less than 1!")
			assert(Value["duration"] <= 120, "value is more than 120!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value["duration"])
			local len_71 = #Value["instructions"]
			assert(len_71 >= 1, "value is less than 1!")
			assert(len_71 <= 2000, "value is more than 2000!")
			assert(utf8.len(Value["instructions"]) ~= nil, "value is not valid utf-8")
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_71 - 1)
			alloc(len_71)
			buffer.writestring(outgoing_buff, outgoing_apos, Value["instructions"], len_71)
			if Value["parameters"] ~= nil then
				bool_39 = bit32.bor(bool_39, 0b0000000001000000)
				table.insert(outgoing_inst, Value["parameters"])
			end
			buffer.writeu8(outgoing_buff, bool_39_pos_1, bool_39)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	MinigameInput = {
		SetCallback = function(Callback: (Player: Player, input_type: (string), input_data: (({
			["zone"]: (string),
		})?)) -> ()): () -> ()
			reliable_events[0] = Callback
			return function()
				reliable_events[0] = nil
			end
		end,
	},
	HideUI = {
		Fire = function(Player: Player, Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_40 = 0
			local bool_40_pos_1 = alloc(1)
			if Value == "MainMenu" then
				bool_40 = bit32.bor(bool_40, 0b0000000000000001)
			elseif Value == "Shop" then
				bool_40 = bit32.bor(bool_40, 0b0000000000000010)
			elseif Value == "Settings" then
				bool_40 = bit32.bor(bool_40, 0b0000000000000100)
			elseif Value == "CrateOpening" then
				bool_40 = bit32.bor(bool_40, 0b0000000000001000)
			elseif Value == "Spectator" then
				bool_40 = bit32.bor(bool_40, 0b0000000000010000)
			elseif Value == "Game" then
				bool_40 = bit32.bor(bool_40, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			buffer.writeu8(outgoing_buff, bool_40_pos_1, bool_40)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_41 = 0
			local bool_41_pos_1 = alloc(1)
			if Value == "MainMenu" then
				bool_41 = bit32.bor(bool_41, 0b0000000000000001)
			elseif Value == "Shop" then
				bool_41 = bit32.bor(bool_41, 0b0000000000000010)
			elseif Value == "Settings" then
				bool_41 = bit32.bor(bool_41, 0b0000000000000100)
			elseif Value == "CrateOpening" then
				bool_41 = bit32.bor(bool_41, 0b0000000000001000)
			elseif Value == "Spectator" then
				bool_41 = bit32.bor(bool_41, 0b0000000000010000)
			elseif Value == "Game" then
				bool_41 = bit32.bor(bool_41, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			buffer.writeu8(outgoing_buff, bool_41_pos_1, bool_41)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_42 = 0
			local bool_42_pos_1 = alloc(1)
			if Value == "MainMenu" then
				bool_42 = bit32.bor(bool_42, 0b0000000000000001)
			elseif Value == "Shop" then
				bool_42 = bit32.bor(bool_42, 0b0000000000000010)
			elseif Value == "Settings" then
				bool_42 = bit32.bor(bool_42, 0b0000000000000100)
			elseif Value == "CrateOpening" then
				bool_42 = bit32.bor(bool_42, 0b0000000000001000)
			elseif Value == "Spectator" then
				bool_42 = bit32.bor(bool_42, 0b0000000000010000)
			elseif Value == "Game" then
				bool_42 = bit32.bor(bool_42, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			buffer.writeu8(outgoing_buff, bool_42_pos_1, bool_42)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_43 = 0
			local bool_43_pos_1 = alloc(1)
			if Value == "MainMenu" then
				bool_43 = bit32.bor(bool_43, 0b0000000000000001)
			elseif Value == "Shop" then
				bool_43 = bit32.bor(bool_43, 0b0000000000000010)
			elseif Value == "Settings" then
				bool_43 = bit32.bor(bool_43, 0b0000000000000100)
			elseif Value == "CrateOpening" then
				bool_43 = bit32.bor(bool_43, 0b0000000000001000)
			elseif Value == "Spectator" then
				bool_43 = bit32.bor(bool_43, 0b0000000000010000)
			elseif Value == "Game" then
				bool_43 = bit32.bor(bool_43, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			buffer.writeu8(outgoing_buff, bool_43_pos_1, bool_43)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_44 = 0
			local bool_44_pos_1 = alloc(1)
			if Value == "MainMenu" then
				bool_44 = bit32.bor(bool_44, 0b0000000000000001)
			elseif Value == "Shop" then
				bool_44 = bit32.bor(bool_44, 0b0000000000000010)
			elseif Value == "Settings" then
				bool_44 = bit32.bor(bool_44, 0b0000000000000100)
			elseif Value == "CrateOpening" then
				bool_44 = bit32.bor(bool_44, 0b0000000000001000)
			elseif Value == "Spectator" then
				bool_44 = bit32.bor(bool_44, 0b0000000000010000)
			elseif Value == "Game" then
				bool_44 = bit32.bor(bool_44, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			buffer.writeu8(outgoing_buff, bool_44_pos_1, bool_44)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	GameStateChanged = {
		Fire = function(Player: Player, state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_45 = 0
			local bool_45_pos_1 = alloc(1)
			if state == "WAITING" then
				bool_45 = bit32.bor(bool_45, 0b0000000000000001)
			elseif state == "STARTING" then
				bool_45 = bit32.bor(bool_45, 0b0000000000000010)
			elseif state == "IN_PROGRESS" then
				bool_45 = bit32.bor(bool_45, 0b0000000000000100)
			elseif state == "FINISHED" then
				bool_45 = bit32.bor(bool_45, 0b0000000000001000)
			elseif state == "ENDING" then
				bool_45 = bit32.bor(bool_45, 0b0000000000010000)
			else
				error("Invalid enumerator")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, player_count)
			buffer.writeu8(outgoing_buff, bool_45_pos_1, bool_45)
			player_map[Player] = save()
		end,
		FireAll = function(state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_46 = 0
			local bool_46_pos_1 = alloc(1)
			if state == "WAITING" then
				bool_46 = bit32.bor(bool_46, 0b0000000000000001)
			elseif state == "STARTING" then
				bool_46 = bit32.bor(bool_46, 0b0000000000000010)
			elseif state == "IN_PROGRESS" then
				bool_46 = bit32.bor(bool_46, 0b0000000000000100)
			elseif state == "FINISHED" then
				bool_46 = bit32.bor(bool_46, 0b0000000000001000)
			elseif state == "ENDING" then
				bool_46 = bit32.bor(bool_46, 0b0000000000010000)
			else
				error("Invalid enumerator")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, player_count)
			buffer.writeu8(outgoing_buff, bool_46_pos_1, bool_46)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_47 = 0
			local bool_47_pos_1 = alloc(1)
			if state == "WAITING" then
				bool_47 = bit32.bor(bool_47, 0b0000000000000001)
			elseif state == "STARTING" then
				bool_47 = bit32.bor(bool_47, 0b0000000000000010)
			elseif state == "IN_PROGRESS" then
				bool_47 = bit32.bor(bool_47, 0b0000000000000100)
			elseif state == "FINISHED" then
				bool_47 = bit32.bor(bool_47, 0b0000000000001000)
			elseif state == "ENDING" then
				bool_47 = bit32.bor(bool_47, 0b0000000000010000)
			else
				error("Invalid enumerator")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, player_count)
			buffer.writeu8(outgoing_buff, bool_47_pos_1, bool_47)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_48 = 0
			local bool_48_pos_1 = alloc(1)
			if state == "WAITING" then
				bool_48 = bit32.bor(bool_48, 0b0000000000000001)
			elseif state == "STARTING" then
				bool_48 = bit32.bor(bool_48, 0b0000000000000010)
			elseif state == "IN_PROGRESS" then
				bool_48 = bit32.bor(bool_48, 0b0000000000000100)
			elseif state == "FINISHED" then
				bool_48 = bit32.bor(bool_48, 0b0000000000001000)
			elseif state == "ENDING" then
				bool_48 = bit32.bor(bool_48, 0b0000000000010000)
			else
				error("Invalid enumerator")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, player_count)
			buffer.writeu8(outgoing_buff, bool_48_pos_1, bool_48)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_49 = 0
			local bool_49_pos_1 = alloc(1)
			if state == "WAITING" then
				bool_49 = bit32.bor(bool_49, 0b0000000000000001)
			elseif state == "STARTING" then
				bool_49 = bit32.bor(bool_49, 0b0000000000000010)
			elseif state == "IN_PROGRESS" then
				bool_49 = bit32.bor(bool_49, 0b0000000000000100)
			elseif state == "FINISHED" then
				bool_49 = bit32.bor(bool_49, 0b0000000000001000)
			elseif state == "ENDING" then
				bool_49 = bit32.bor(bool_49, 0b0000000000010000)
			else
				error("Invalid enumerator")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, player_count)
			buffer.writeu8(outgoing_buff, bool_49_pos_1, bool_49)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	CrateOpened = {
		Fire = function(Player: Player, player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_72 = #reward["name"]
			assert(len_72 >= 1, "value is less than 1!")
			assert(len_72 <= 200, "value is more than 200!")
			assert(utf8.len(reward["name"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_72 - 1)
			alloc(len_72)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["name"], len_72)
			local len_73 = #reward["rarity"]
			assert(len_73 >= 1, "value is less than 1!")
			assert(len_73 <= 80, "value is more than 80!")
			assert(utf8.len(reward["rarity"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_73 - 1)
			alloc(len_73)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["rarity"], len_73)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, reward["value"])
			player_map[Player] = save()
		end,
		FireAll = function(player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_74 = #reward["name"]
			assert(len_74 >= 1, "value is less than 1!")
			assert(len_74 <= 200, "value is more than 200!")
			assert(utf8.len(reward["name"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_74 - 1)
			alloc(len_74)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["name"], len_74)
			local len_75 = #reward["rarity"]
			assert(len_75 >= 1, "value is less than 1!")
			assert(len_75 <= 80, "value is more than 80!")
			assert(utf8.len(reward["rarity"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_75 - 1)
			alloc(len_75)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["rarity"], len_75)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, reward["value"])
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_76 = #reward["name"]
			assert(len_76 >= 1, "value is less than 1!")
			assert(len_76 <= 200, "value is more than 200!")
			assert(utf8.len(reward["name"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_76 - 1)
			alloc(len_76)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["name"], len_76)
			local len_77 = #reward["rarity"]
			assert(len_77 >= 1, "value is less than 1!")
			assert(len_77 <= 80, "value is more than 80!")
			assert(utf8.len(reward["rarity"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_77 - 1)
			alloc(len_77)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["rarity"], len_77)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, reward["value"])
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_78 = #reward["name"]
			assert(len_78 >= 1, "value is less than 1!")
			assert(len_78 <= 200, "value is more than 200!")
			assert(utf8.len(reward["name"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_78 - 1)
			alloc(len_78)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["name"], len_78)
			local len_79 = #reward["rarity"]
			assert(len_79 >= 1, "value is less than 1!")
			assert(len_79 <= 80, "value is more than 80!")
			assert(utf8.len(reward["rarity"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_79 - 1)
			alloc(len_79)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["rarity"], len_79)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, reward["value"])
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			local len_80 = #reward["name"]
			assert(len_80 >= 1, "value is less than 1!")
			assert(len_80 <= 200, "value is more than 200!")
			assert(utf8.len(reward["name"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_80 - 1)
			alloc(len_80)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["name"], len_80)
			local len_81 = #reward["rarity"]
			assert(len_81 >= 1, "value is less than 1!")
			assert(len_81 <= 80, "value is more than 80!")
			assert(utf8.len(reward["rarity"]) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_81 - 1)
			alloc(len_81)
			buffer.writestring(outgoing_buff, outgoing_apos, reward["rarity"], len_81)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, reward["value"])
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	CoinsAwarded = {
		Fire = function(Player: Player, player: (Player), amount: (number), reason: (string))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, amount)
			local len_82 = #reason
			assert(len_82 >= 1, "value is less than 1!")
			assert(len_82 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_82 - 1)
			alloc(len_82)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_82)
			player_map[Player] = save()
		end,
		FireAll = function(player: (Player), amount: (number), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, amount)
			local len_83 = #reason
			assert(len_83 >= 1, "value is less than 1!")
			assert(len_83 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_83 - 1)
			alloc(len_83)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_83)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, player: (Player), amount: (number), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, amount)
			local len_84 = #reason
			assert(len_84 >= 1, "value is less than 1!")
			assert(len_84 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_84 - 1)
			alloc(len_84)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_84)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { [unknown]: Player }, player: (Player), amount: (number), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, amount)
			local len_85 = #reason
			assert(len_85 >= 1, "value is less than 1!")
			assert(len_85 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_85 - 1)
			alloc(len_85)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_85)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: any }, player: (Player), amount: (number), reason: (string))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			assert(player:IsA("Player"), "received instance is not of the Player class!")
			table.insert(outgoing_inst, player)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, amount)
			local len_86 = #reason
			assert(len_86 >= 1, "value is less than 1!")
			assert(len_86 <= 200, "value is more than 200!")
			assert(utf8.len(reason) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_86 - 1)
			alloc(len_86)
			buffer.writestring(outgoing_buff, outgoing_apos, reason, len_86)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
}
type Events = typeof(returns)
return returns
