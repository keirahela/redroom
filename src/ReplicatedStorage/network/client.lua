--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.25 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		WinnerChosePlayer = table.freeze({
			Fire = noop
		}),
		WakeUpTransition = table.freeze({
			On = noop
		}),
		UpdateUI = table.freeze({
			On = noop
		}),
		UIInteraction = table.freeze({
			Fire = noop
		}),
		TriggerEffect = table.freeze({
			On = noop
		}),
		TeleportCharacter = table.freeze({
			On = noop
		}),
		SpectateRequest = table.freeze({
			Fire = noop
		}),
		SpectateChanged = table.freeze({
			On = noop
		}),
		ShowUI = table.freeze({
			On = noop
		}),
		ShowPopup = table.freeze({
			On = noop
		}),
		ShowNotification = table.freeze({
			On = noop
		}),
		SettingsChanged = table.freeze({
			Fire = noop
		}),
		ScreenTransition = table.freeze({
			On = noop
		}),
		RoundStarting = table.freeze({
			On = noop
		}),
		RoundEnded = table.freeze({
			On = noop
		}),
		PurchaseCrate = table.freeze({
			Fire = noop
		}),
		PopupResponse = table.freeze({
			Fire = noop
		}),
		PlayerEliminated = table.freeze({
			On = noop
		}),
		PlayerDataUpdated = table.freeze({
			On = noop
		}),
		PlaySeatAnimation = table.freeze({
			On = noop
		}),
		MinigameTimer = table.freeze({
			On = noop
		}),
		MinigameStarted = table.freeze({
			On = noop
		}),
		MinigameInput = table.freeze({
			Fire = noop
		}),
		HideUI = table.freeze({
			On = noop
		}),
		GameStateChanged = table.freeze({
			On = noop
		}),
		CrateOpened = table.freeze({
			On = noop
		}),
		CoinsAwarded = table.freeze({
			On = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

local unreliable = { remotes:WaitForChild("ZAP_UNRELIABLE_0") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
export type MinigameType = ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser" | "DragTheLine")
export type NotificationData = ({
	["type"]: ("Info" | "Warning" | "Success" | "Error"),
	["title"]: (string),
	["message"]: (string),
	["duration"]: (number),
})
export type CountdownData = ({
	["duration"]: (number),
	["title"]: (string),
	["description"]: (string),
})
export type MinigameData = ({
	["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser" | "DragTheLine"),
	["duration"]: (number),
	["instructions"]: (string),
	["parameters"]: ((unknown)),
})
export type PlayerData = ({
	["is_alive"]: (boolean),
	["is_spectating"]: (boolean),
})
export type UIType = ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game")
export type GameState = ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING")
export type CrateReward = ({
	["name"]: (string),
	["rarity"]: (string),
	["value"]: (number),
})
export type NotificationType = ("Info" | "Warning" | "Success" | "Error")

local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(19)
local reliable_event_queue: { [number]: { any } } = table.create(19)
local unreliable_events = table.create(1)
local unreliable_event_queue: { [number]: { any } } = table.create(1)
reliable_events[16] = {}
reliable_event_queue[16] = {}
reliable_events[7] = {}
reliable_event_queue[7] = {}
reliable_events[14] = {}
reliable_event_queue[14] = {}
reliable_events[18] = {}
reliable_event_queue[18] = {}
reliable_events[12] = {}
reliable_event_queue[12] = {}
reliable_events[5] = {}
reliable_event_queue[5] = {}
reliable_events[11] = {}
reliable_event_queue[11] = {}
reliable_events[10] = {}
reliable_event_queue[10] = {}
reliable_events[15] = {}
reliable_event_queue[15] = {}
reliable_events[1] = {}
reliable_event_queue[1] = {}
reliable_events[2] = {}
reliable_event_queue[2] = {}
reliable_events[4] = {}
reliable_event_queue[4] = {}
reliable_events[8] = {}
reliable_event_queue[8] = {}
reliable_events[17] = {}
reliable_event_queue[17] = {}
unreliable_events[0] = {}
unreliable_event_queue[0] = {}
reliable_events[3] = {}
reliable_event_queue[3] = {}
reliable_events[6] = {}
reliable_event_queue[6] = {}
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable_events[13] = {}
reliable_event_queue[13] = {}
reliable_events[9] = {}
reliable_event_queue[9] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 16 then
			local value, value2
			local len_1 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_1 >= 1, "value is less than 1!")
			assert(len_1 <= 40, "value is more than 40!")
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			value2 = buffer.readu8(incoming_buff, read(1))
			assert(value2 >= 1, "value is less than 1!")
			assert(value2 <= 5, "value is more than 5!")
			if reliable_events[16][1] then
				for _, cb in reliable_events[16] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[16], { value, value2 })
				if #reliable_event_queue[16] > 64 then
					warn(`[ZAP] {#reliable_event_queue[16]} events in queue for WakeUpTransition. Did you forget to attach a listener?`)
				end
			end
		elseif id == 7 then
			local value, value2, value3
			local bool_1 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_1, 0b0000000000000001) then
				value = "MainMenu"
			elseif bit32.btest(bool_1, 0b0000000000000010) then
				value = "Shop"
			elseif bit32.btest(bool_1, 0b0000000000000100) then
				value = "Settings"
			elseif bit32.btest(bool_1, 0b0000000000001000) then
				value = "CrateOpening"
			elseif bit32.btest(bool_1, 0b0000000000010000) then
				value = "Spectator"
			elseif bit32.btest(bool_1, 0b0000000000100000) then
				value = "Game"
			end
			local len_2 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_2 >= 1, "value is less than 1!")
			assert(len_2 <= 120, "value is more than 120!")
			value2 = buffer.readstring(incoming_buff, read(len_2), len_2)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_1, 0b0000000001000000) then
				incoming_ipos = incoming_ipos + 1
				value3 = incoming_inst[incoming_ipos]
			else
				value3 = nil
			end
			if reliable_events[7][1] then
				for _, cb in reliable_events[7] do
					task.spawn(cb, value, value2, value3)
				end
			else
				table.insert(reliable_event_queue[7], { value, value2, value3 })
				if #reliable_event_queue[7] > 64 then
					warn(`[ZAP] {#reliable_event_queue[7]} events in queue for UpdateUI. Did you forget to attach a listener?`)
				end
			end
		elseif id == 14 then
			local value, value2, value3
			local bool_2 = buffer.readu8(incoming_buff, read(1))
			local len_3 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_3 >= 1, "value is less than 1!")
			assert(len_3 <= 120, "value is more than 120!")
			value = buffer.readstring(incoming_buff, read(len_3), len_3)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_2, 0b0000000000000001) then
				incoming_ipos = incoming_ipos + 1
				value2 = incoming_inst[incoming_ipos]
			else
				value2 = nil
			end
			if bit32.btest(bool_2, 0b0000000000000010) then
				incoming_ipos = incoming_ipos + 1
				value3 = incoming_inst[incoming_ipos]
			else
				value3 = nil
			end
			if reliable_events[14][1] then
				for _, cb in reliable_events[14] do
					task.spawn(cb, value, value2, value3)
				end
			else
				table.insert(reliable_event_queue[14], { value, value2, value3 })
				if #reliable_event_queue[14] > 64 then
					warn(`[ZAP] {#reliable_event_queue[14]} events in queue for TriggerEffect. Did you forget to attach a listener?`)
				end
			end
		elseif id == 18 then
			local value
			local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local angle_1 = axisangle_1.Magnitude
			if angle_1 ~= 0 then
				value = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
			else
				value = CFrame.new(pos_1)
			end
			if reliable_events[18][1] then
				for _, cb in reliable_events[18] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[18], value)
				if #reliable_event_queue[18] > 64 then
					warn(`[ZAP] {#reliable_event_queue[18]} events in queue for TeleportCharacter. Did you forget to attach a listener?`)
				end
			end
		elseif id == 12 then
			local value, value2
			local bool_3 = buffer.readu8(incoming_buff, read(1))
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			assert(value:IsA("Player"), "received instance is not of the Player class!")
			if bit32.btest(bool_3, 0b0000000000000001) then
				incoming_ipos = incoming_ipos + 1
				value2 = incoming_inst[incoming_ipos]
				assert(value2 == nil or value2:IsA("Player"), "received instance is not of the Player class!")
			else
				value2 = nil
			end
			if reliable_events[12][1] then
				for _, cb in reliable_events[12] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[12], { value, value2 })
				if #reliable_event_queue[12] > 64 then
					warn(`[ZAP] {#reliable_event_queue[12]} events in queue for SpectateChanged. Did you forget to attach a listener?`)
				end
			end
		elseif id == 5 then
			local value, value2
			local bool_4 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_4, 0b0000000000000001) then
				value = "MainMenu"
			elseif bit32.btest(bool_4, 0b0000000000000010) then
				value = "Shop"
			elseif bit32.btest(bool_4, 0b0000000000000100) then
				value = "Settings"
			elseif bit32.btest(bool_4, 0b0000000000001000) then
				value = "CrateOpening"
			elseif bit32.btest(bool_4, 0b0000000000010000) then
				value = "Spectator"
			elseif bit32.btest(bool_4, 0b0000000000100000) then
				value = "Game"
			end
			if bit32.btest(bool_4, 0b0000000001000000) then
				incoming_ipos = incoming_ipos + 1
				value2 = incoming_inst[incoming_ipos]
			else
				value2 = nil
			end
			if reliable_events[5][1] then
				for _, cb in reliable_events[5] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[5], { value, value2 })
				if #reliable_event_queue[5] > 64 then
					warn(`[ZAP] {#reliable_event_queue[5]} events in queue for ShowUI. Did you forget to attach a listener?`)
				end
			end
		elseif id == 11 then
			local value, value2, value3
			local len_4 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_4 >= 1, "value is less than 1!")
			assert(len_4 <= 200, "value is more than 200!")
			value = buffer.readstring(incoming_buff, read(len_4), len_4)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			local len_5 = buffer.readu16(incoming_buff, read(2)) + 1
			assert(len_5 >= 1, "value is less than 1!")
			assert(len_5 <= 800, "value is more than 800!")
			value2 = buffer.readstring(incoming_buff, read(len_5), len_5)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			local len_6 = buffer.readu16(incoming_buff, read(2))
			value3 = table.create(len_6)
			for i_1 = 1, len_6 do
				local val_1
				local len_7 = buffer.readu16(incoming_buff, read(2))
				val_1 = buffer.readstring(incoming_buff, read(len_7), len_7)
				assert(utf8.len(val_1) ~= nil, "value is not valid utf-8")
				value3[i_1] = val_1
			end
			if reliable_events[11][1] then
				for _, cb in reliable_events[11] do
					task.spawn(cb, value, value2, value3)
				end
			else
				table.insert(reliable_event_queue[11], { value, value2, value3 })
				if #reliable_event_queue[11] > 64 then
					warn(`[ZAP] {#reliable_event_queue[11]} events in queue for ShowPopup. Did you forget to attach a listener?`)
				end
			end
		elseif id == 10 then
			local value
			local bool_5 = buffer.readu8(incoming_buff, read(1))
			value = {  }
			if bit32.btest(bool_5, 0b0000000000000001) then
				value["type"] = "Info"
			elseif bit32.btest(bool_5, 0b0000000000000010) then
				value["type"] = "Warning"
			elseif bit32.btest(bool_5, 0b0000000000000100) then
				value["type"] = "Success"
			elseif bit32.btest(bool_5, 0b0000000000001000) then
				value["type"] = "Error"
			end
			local len_8 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_8 >= 1, "value is less than 1!")
			assert(len_8 <= 200, "value is more than 200!")
			value["title"] = buffer.readstring(incoming_buff, read(len_8), len_8)
			assert(utf8.len(value["title"]) ~= nil, "value is not valid utf-8")
			local len_9 = buffer.readu16(incoming_buff, read(2)) + 1
			assert(len_9 >= 1, "value is less than 1!")
			assert(len_9 <= 800, "value is more than 800!")
			value["message"] = buffer.readstring(incoming_buff, read(len_9), len_9)
			assert(utf8.len(value["message"]) ~= nil, "value is not valid utf-8")
			value["duration"] = buffer.readu8(incoming_buff, read(1))
			assert(value["duration"] >= 1, "value is less than 1!")
			assert(value["duration"] <= 30, "value is more than 30!")
			if reliable_events[10][1] then
				for _, cb in reliable_events[10] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[10], value)
				if #reliable_event_queue[10] > 64 then
					warn(`[ZAP] {#reliable_event_queue[10]} events in queue for ShowNotification. Did you forget to attach a listener?`)
				end
			end
		elseif id == 15 then
			local value, value2
			local len_10 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_10 >= 1, "value is less than 1!")
			assert(len_10 <= 80, "value is more than 80!")
			value = buffer.readstring(incoming_buff, read(len_10), len_10)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			value2 = buffer.readu8(incoming_buff, read(1))
			assert(value2 >= 1, "value is less than 1!")
			assert(value2 <= 10, "value is more than 10!")
			if reliable_events[15][1] then
				for _, cb in reliable_events[15] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[15], { value, value2 })
				if #reliable_event_queue[15] > 64 then
					warn(`[ZAP] {#reliable_event_queue[15]} events in queue for ScreenTransition. Did you forget to attach a listener?`)
				end
			end
		elseif id == 1 then
			local value
			value = {  }
			value["duration"] = buffer.readu8(incoming_buff, read(1))
			assert(value["duration"] >= 1, "value is less than 1!")
			assert(value["duration"] <= 60, "value is more than 60!")
			local len_11 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_11 >= 1, "value is less than 1!")
			assert(len_11 <= 200, "value is more than 200!")
			value["title"] = buffer.readstring(incoming_buff, read(len_11), len_11)
			assert(utf8.len(value["title"]) ~= nil, "value is not valid utf-8")
			local len_12 = buffer.readu16(incoming_buff, read(2))
			assert(len_12 >= 0, "value is less than 0!")
			assert(len_12 <= 400, "value is more than 400!")
			value["description"] = buffer.readstring(incoming_buff, read(len_12), len_12)
			assert(utf8.len(value["description"]) ~= nil, "value is not valid utf-8")
			if reliable_events[1][1] then
				for _, cb in reliable_events[1] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[1], value)
				if #reliable_event_queue[1] > 64 then
					warn(`[ZAP] {#reliable_event_queue[1]} events in queue for RoundStarting. Did you forget to attach a listener?`)
				end
			end
		elseif id == 2 then
			local value, value2
			value = buffer.readu8(incoming_buff, read(1))
			value2 = buffer.readu32(incoming_buff, read(4))
			if reliable_events[2][1] then
				for _, cb in reliable_events[2] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[2], { value, value2 })
				if #reliable_event_queue[2] > 64 then
					warn(`[ZAP] {#reliable_event_queue[2]} events in queue for RoundEnded. Did you forget to attach a listener?`)
				end
			end
		elseif id == 4 then
			local value, value2
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			assert(value:IsA("Player"), "received instance is not of the Player class!")
			local len_13 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_13 >= 1, "value is less than 1!")
			assert(len_13 <= 200, "value is more than 200!")
			value2 = buffer.readstring(incoming_buff, read(len_13), len_13)
			assert(utf8.len(value2) ~= nil, "value is not valid utf-8")
			if reliable_events[4][1] then
				for _, cb in reliable_events[4] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[4], { value, value2 })
				if #reliable_event_queue[4] > 64 then
					warn(`[ZAP] {#reliable_event_queue[4]} events in queue for PlayerEliminated. Did you forget to attach a listener?`)
				end
			end
		elseif id == 8 then
			local value, value2
			local bool_6 = buffer.readu8(incoming_buff, read(1))
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			assert(value:IsA("Player"), "received instance is not of the Player class!")
			value2 = {  }
			value2["is_alive"] = bit32.btest(bool_6, 0b0000000000000001)
			value2["is_spectating"] = bit32.btest(bool_6, 0b0000000000000010)
			if reliable_events[8][1] then
				for _, cb in reliable_events[8] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[8], { value, value2 })
				if #reliable_event_queue[8] > 64 then
					warn(`[ZAP] {#reliable_event_queue[8]} events in queue for PlayerDataUpdated. Did you forget to attach a listener?`)
				end
			end
		elseif id == 17 then
			local value
			local len_14 = buffer.readu8(incoming_buff, read(1)) + 10
			assert(len_14 >= 10, "value is less than 10!")
			assert(len_14 <= 80, "value is more than 80!")
			value = buffer.readstring(incoming_buff, read(len_14), len_14)
			assert(utf8.len(value) ~= nil, "value is not valid utf-8")
			if reliable_events[17][1] then
				for _, cb in reliable_events[17] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[17], value)
				if #reliable_event_queue[17] > 64 then
					warn(`[ZAP] {#reliable_event_queue[17]} events in queue for PlaySeatAnimation. Did you forget to attach a listener?`)
				end
			end
		elseif id == 3 then
			local value
			local bool_7 = buffer.readu8(incoming_buff, read(1))
			value = {  }
			if bit32.btest(bool_7, 0b0000000000000001) then
				value["type"] = "Maze"
			elseif bit32.btest(bool_7, 0b0000000000000010) then
				value["type"] = "HigherLower"
			elseif bit32.btest(bool_7, 0b0000000000000100) then
				value["type"] = "Blackjack"
			elseif bit32.btest(bool_7, 0b0000000000001000) then
				value["type"] = "RatRace"
			elseif bit32.btest(bool_7, 0b0000000000010000) then
				value["type"] = "React"
			elseif bit32.btest(bool_7, 0b0000000000100000) then
				value["type"] = "BombGuesser"
			elseif bit32.btest(bool_7, 0b0000000001000000) then
				value["type"] = "DragTheLine"
			end
			value["duration"] = buffer.readu8(incoming_buff, read(1))
			assert(value["duration"] >= 1, "value is less than 1!")
			assert(value["duration"] <= 120, "value is more than 120!")
			local len_15 = buffer.readu16(incoming_buff, read(2)) + 1
			assert(len_15 >= 1, "value is less than 1!")
			assert(len_15 <= 2000, "value is more than 2000!")
			value["instructions"] = buffer.readstring(incoming_buff, read(len_15), len_15)
			assert(utf8.len(value["instructions"]) ~= nil, "value is not valid utf-8")
			if bit32.btest(bool_7, 0b0000000010000000) then
				incoming_ipos = incoming_ipos + 1
				value["parameters"] = incoming_inst[incoming_ipos]
			else
				value["parameters"] = nil
			end
			if reliable_events[3][1] then
				for _, cb in reliable_events[3] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[3], value)
				if #reliable_event_queue[3] > 64 then
					warn(`[ZAP] {#reliable_event_queue[3]} events in queue for MinigameStarted. Did you forget to attach a listener?`)
				end
			end
		elseif id == 6 then
			local value
			local bool_8 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_8, 0b0000000000000001) then
				value = "MainMenu"
			elseif bit32.btest(bool_8, 0b0000000000000010) then
				value = "Shop"
			elseif bit32.btest(bool_8, 0b0000000000000100) then
				value = "Settings"
			elseif bit32.btest(bool_8, 0b0000000000001000) then
				value = "CrateOpening"
			elseif bit32.btest(bool_8, 0b0000000000010000) then
				value = "Spectator"
			elseif bit32.btest(bool_8, 0b0000000000100000) then
				value = "Game"
			end
			if reliable_events[6][1] then
				for _, cb in reliable_events[6] do
					task.spawn(cb, value)
				end
			else
				table.insert(reliable_event_queue[6], value)
				if #reliable_event_queue[6] > 64 then
					warn(`[ZAP] {#reliable_event_queue[6]} events in queue for HideUI. Did you forget to attach a listener?`)
				end
			end
		elseif id == 0 then
			local value, value2
			local bool_9 = buffer.readu8(incoming_buff, read(1))
			if bit32.btest(bool_9, 0b0000000000000001) then
				value = "WAITING"
			elseif bit32.btest(bool_9, 0b0000000000000010) then
				value = "STARTING"
			elseif bit32.btest(bool_9, 0b0000000000000100) then
				value = "IN_PROGRESS"
			elseif bit32.btest(bool_9, 0b0000000000001000) then
				value = "FINISHED"
			elseif bit32.btest(bool_9, 0b0000000000010000) then
				value = "ENDING"
			end
			value2 = buffer.readu8(incoming_buff, read(1))
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[0], { value, value2 })
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for GameStateChanged. Did you forget to attach a listener?`)
				end
			end
		elseif id == 13 then
			local value, value2
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			assert(value:IsA("Player"), "received instance is not of the Player class!")
			value2 = {  }
			local len_16 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_16 >= 1, "value is less than 1!")
			assert(len_16 <= 200, "value is more than 200!")
			value2["name"] = buffer.readstring(incoming_buff, read(len_16), len_16)
			assert(utf8.len(value2["name"]) ~= nil, "value is not valid utf-8")
			local len_17 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_17 >= 1, "value is less than 1!")
			assert(len_17 <= 80, "value is more than 80!")
			value2["rarity"] = buffer.readstring(incoming_buff, read(len_17), len_17)
			assert(utf8.len(value2["rarity"]) ~= nil, "value is not valid utf-8")
			value2["value"] = buffer.readu32(incoming_buff, read(4))
			if reliable_events[13][1] then
				for _, cb in reliable_events[13] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[13], { value, value2 })
				if #reliable_event_queue[13] > 64 then
					warn(`[ZAP] {#reliable_event_queue[13]} events in queue for CrateOpened. Did you forget to attach a listener?`)
				end
			end
		elseif id == 9 then
			local value, value2, value3
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil, "received instance is nil!")
			assert(value:IsA("Player"), "received instance is not of the Player class!")
			value2 = buffer.readu32(incoming_buff, read(4))
			local len_18 = buffer.readu8(incoming_buff, read(1)) + 1
			assert(len_18 >= 1, "value is less than 1!")
			assert(len_18 <= 200, "value is more than 200!")
			value3 = buffer.readstring(incoming_buff, read(len_18), len_18)
			assert(utf8.len(value3) ~= nil, "value is not valid utf-8")
			if reliable_events[9][1] then
				for _, cb in reliable_events[9] do
					task.spawn(cb, value, value2, value3)
				end
			else
				table.insert(reliable_event_queue[9], { value, value2, value3 })
				if #reliable_event_queue[9] > 64 then
					warn(`[ZAP] {#reliable_event_queue[9]} events in queue for CoinsAwarded. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable[1].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = buffer.readu8(incoming_buff, read(1))
	if unreliable_events[0][1] then
		for _, cb in unreliable_events[0] do
			task.spawn(cb, value)
		end
	else
		table.insert(unreliable_event_queue[0], value)
		if #unreliable_event_queue[0] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[0]} events in queue for MinigameTimer. Did you forget to attach a listener?`)
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	WinnerChosePlayer = {
		Fire = function(chosenUserId: (number))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, chosenUserId)
		end,
	},
	WakeUpTransition = {
		On = function(Callback: (phase: (string), duration: (number)) -> ())
			table.insert(reliable_events[16], Callback)
			for _, value in reliable_event_queue[16] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[16] = {}
			return function()
				table.remove(reliable_events[16], table.find(reliable_events[16], Callback))
			end
		end,
	},
	UpdateUI = {
		On = function(Callback: (ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), element: (string), value: ((unknown))) -> ())
			table.insert(reliable_events[7], Callback)
			for _, value in reliable_event_queue[7] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[7] = {}
			return function()
				table.remove(reliable_events[7], table.find(reliable_events[7], Callback))
			end
		end,
	},
	UIInteraction = {
		Fire = function(ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), action: (string), data: ((unknown)))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local bool_10 = 0
			local bool_10_pos_1 = alloc(1)
			if ui_type == "MainMenu" then
				bool_10 = bit32.bor(bool_10, 0b0000000000000001)
			elseif ui_type == "Shop" then
				bool_10 = bit32.bor(bool_10, 0b0000000000000010)
			elseif ui_type == "Settings" then
				bool_10 = bit32.bor(bool_10, 0b0000000000000100)
			elseif ui_type == "CrateOpening" then
				bool_10 = bit32.bor(bool_10, 0b0000000000001000)
			elseif ui_type == "Spectator" then
				bool_10 = bit32.bor(bool_10, 0b0000000000010000)
			elseif ui_type == "Game" then
				bool_10 = bit32.bor(bool_10, 0b0000000000100000)
			else
				error("Invalid enumerator")
			end
			local len_19 = #action
			assert(len_19 >= 1, "value is less than 1!")
			assert(len_19 <= 120, "value is more than 120!")
			assert(utf8.len(action) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_19 - 1)
			alloc(len_19)
			buffer.writestring(outgoing_buff, outgoing_apos, action, len_19)
			if data ~= nil then
				bool_10 = bit32.bor(bool_10, 0b0000000001000000)
				table.insert(outgoing_inst, data)
			end
			buffer.writeu8(outgoing_buff, bool_10_pos_1, bool_10)
		end,
	},
	TriggerEffect = {
		On = function(Callback: (effect_name: (string), target: ((Instance)?), data: ((unknown))) -> ())
			table.insert(reliable_events[14], Callback)
			for _, value in reliable_event_queue[14] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[14] = {}
			return function()
				table.remove(reliable_events[14], table.find(reliable_events[14], Callback))
			end
		end,
	},
	TeleportCharacter = {
		On = function(Callback: (cframe: (CFrame)) -> ())
			table.insert(reliable_events[18], Callback)
			for _, value in reliable_event_queue[18] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[18] = {}
			return function()
				table.remove(reliable_events[18], table.find(reliable_events[18], Callback))
			end
		end,
	},
	SpectateRequest = {
		Fire = function(Value: ((Player)?))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local bool_11 = 0
			local bool_11_pos_1 = alloc(1)
			if Value ~= nil then
				bool_11 = bit32.bor(bool_11, 0b0000000000000001)
				assert(Value:IsA("Player"), "received instance is not of the Player class!")
				table.insert(outgoing_inst, Value)
			end
			buffer.writeu8(outgoing_buff, bool_11_pos_1, bool_11)
		end,
	},
	SpectateChanged = {
		On = function(Callback: (spectator: (Player), target: ((Player)?)) -> ())
			table.insert(reliable_events[12], Callback)
			for _, value in reliable_event_queue[12] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[12] = {}
			return function()
				table.remove(reliable_events[12], table.find(reliable_events[12], Callback))
			end
		end,
	},
	ShowUI = {
		On = function(Callback: (ui_type: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game"), data: ((unknown))) -> ())
			table.insert(reliable_events[5], Callback)
			for _, value in reliable_event_queue[5] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[5] = {}
			return function()
				table.remove(reliable_events[5], table.find(reliable_events[5], Callback))
			end
		end,
	},
	ShowPopup = {
		On = function(Callback: (title: (string), message: (string), buttons: ({ (string) })) -> ())
			table.insert(reliable_events[11], Callback)
			for _, value in reliable_event_queue[11] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[11] = {}
			return function()
				table.remove(reliable_events[11], table.find(reliable_events[11], Callback))
			end
		end,
	},
	ShowNotification = {
		On = function(Callback: (Value: ({
			["type"]: ("Info" | "Warning" | "Success" | "Error"),
			["title"]: (string),
			["message"]: (string),
			["duration"]: (number),
		})) -> ())
			table.insert(reliable_events[10], Callback)
			for _, value in reliable_event_queue[10] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[10] = {}
			return function()
				table.remove(reliable_events[10], table.find(reliable_events[10], Callback))
			end
		end,
	},
	SettingsChanged = {
		Fire = function(setting_name: (string), value: ((unknown)))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local bool_12 = 0
			local bool_12_pos_1 = alloc(1)
			local len_20 = #setting_name
			assert(len_20 >= 1, "value is less than 1!")
			assert(len_20 <= 120, "value is more than 120!")
			assert(utf8.len(setting_name) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_20 - 1)
			alloc(len_20)
			buffer.writestring(outgoing_buff, outgoing_apos, setting_name, len_20)
			if value ~= nil then
				bool_12 = bit32.bor(bool_12, 0b0000000000000001)
				table.insert(outgoing_inst, value)
			end
			buffer.writeu8(outgoing_buff, bool_12_pos_1, bool_12)
		end,
	},
	ScreenTransition = {
		On = function(Callback: (transition_type: (string), duration: (number)) -> ())
			table.insert(reliable_events[15], Callback)
			for _, value in reliable_event_queue[15] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[15] = {}
			return function()
				table.remove(reliable_events[15], table.find(reliable_events[15], Callback))
			end
		end,
	},
	RoundStarting = {
		On = function(Callback: (Value: ({
			["duration"]: (number),
			["title"]: (string),
			["description"]: (string),
		})) -> ())
			table.insert(reliable_events[1], Callback)
			for _, value in reliable_event_queue[1] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[1] = {}
			return function()
				table.remove(reliable_events[1], table.find(reliable_events[1], Callback))
			end
		end,
	},
	RoundEnded = {
		On = function(Callback: (winner_count: (number), coins_awarded: (number)) -> ())
			table.insert(reliable_events[2], Callback)
			for _, value in reliable_event_queue[2] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[2] = {}
			return function()
				table.remove(reliable_events[2], table.find(reliable_events[2], Callback))
			end
		end,
	},
	PurchaseCrate = {
		Fire = function(Value: (string))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_21 = #Value
			assert(len_21 >= 1, "value is less than 1!")
			assert(len_21 <= 80, "value is more than 80!")
			assert(utf8.len(Value) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_21 - 1)
			alloc(len_21)
			buffer.writestring(outgoing_buff, outgoing_apos, Value, len_21)
		end,
	},
	PopupResponse = {
		Fire = function(popup_id: (string), button_index: (number))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			local len_22 = #popup_id
			assert(len_22 >= 1, "value is less than 1!")
			assert(len_22 <= 80, "value is more than 80!")
			assert(utf8.len(popup_id) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_22 - 1)
			alloc(len_22)
			buffer.writestring(outgoing_buff, outgoing_apos, popup_id, len_22)
			assert(button_index >= 0, "value is less than 0!")
			assert(button_index <= 2, "value is more than 2!")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, button_index)
		end,
	},
	PlayerEliminated = {
		On = function(Callback: (player: (Player), reason: (string)) -> ())
			table.insert(reliable_events[4], Callback)
			for _, value in reliable_event_queue[4] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[4] = {}
			return function()
				table.remove(reliable_events[4], table.find(reliable_events[4], Callback))
			end
		end,
	},
	PlayerDataUpdated = {
		On = function(Callback: (player: (Player), data: ({
			["is_alive"]: (boolean),
			["is_spectating"]: (boolean),
		})) -> ())
			table.insert(reliable_events[8], Callback)
			for _, value in reliable_event_queue[8] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[8] = {}
			return function()
				table.remove(reliable_events[8], table.find(reliable_events[8], Callback))
			end
		end,
	},
	PlaySeatAnimation = {
		On = function(Callback: (animationId: (string)) -> ())
			table.insert(reliable_events[17], Callback)
			for _, value in reliable_event_queue[17] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[17] = {}
			return function()
				table.remove(reliable_events[17], table.find(reliable_events[17], Callback))
			end
		end,
	},
	MinigameTimer = {
		On = function(Callback: (Value: (number)) -> ())
			table.insert(unreliable_events[0], Callback)
			for _, value in unreliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			unreliable_event_queue[0] = {}
			return function()
				table.remove(unreliable_events[0], table.find(unreliable_events[0], Callback))
			end
		end,
	},
	MinigameStarted = {
		On = function(Callback: (Value: ({
			["type"]: ("Maze" | "HigherLower" | "Blackjack" | "RatRace" | "React" | "BombGuesser" | "DragTheLine"),
			["duration"]: (number),
			["instructions"]: (string),
			["parameters"]: ((unknown)),
		})) -> ())
			table.insert(reliable_events[3], Callback)
			for _, value in reliable_event_queue[3] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[3] = {}
			return function()
				table.remove(reliable_events[3], table.find(reliable_events[3], Callback))
			end
		end,
	},
	MinigameInput = {
		Fire = function(input_type: (string), input_data: (({
			["zone"]: (string),
		})?))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local bool_13 = 0
			local bool_13_pos_1 = alloc(1)
			local len_23 = #input_type
			assert(len_23 >= 1, "value is less than 1!")
			assert(len_23 <= 80, "value is more than 80!")
			assert(utf8.len(input_type) ~= nil, "value is not valid utf-8")
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, len_23 - 1)
			alloc(len_23)
			buffer.writestring(outgoing_buff, outgoing_apos, input_type, len_23)
			if input_data ~= nil then
				bool_13 = bit32.bor(bool_13, 0b0000000000000001)
				local len_24 = #input_data["zone"]
				assert(len_24 >= 3, "value is less than 3!")
				assert(len_24 <= 40, "value is more than 40!")
				assert(utf8.len(input_data["zone"]) ~= nil, "value is not valid utf-8")
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, len_24 - 3)
				alloc(len_24)
				buffer.writestring(outgoing_buff, outgoing_apos, input_data["zone"], len_24)
			end
			buffer.writeu8(outgoing_buff, bool_13_pos_1, bool_13)
		end,
	},
	HideUI = {
		On = function(Callback: (Value: ("MainMenu" | "Shop" | "Settings" | "CrateOpening" | "Spectator" | "Game")) -> ())
			table.insert(reliable_events[6], Callback)
			for _, value in reliable_event_queue[6] do
				task.spawn(Callback, value)
			end
			reliable_event_queue[6] = {}
			return function()
				table.remove(reliable_events[6], table.find(reliable_events[6], Callback))
			end
		end,
	},
	GameStateChanged = {
		On = function(Callback: (state: ("WAITING" | "STARTING" | "IN_PROGRESS" | "FINISHED" | "ENDING"), player_count: (number)) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	CrateOpened = {
		On = function(Callback: (player: (Player), reward: ({
			["name"]: (string),
			["rarity"]: (string),
			["value"]: (number),
		})) -> ())
			table.insert(reliable_events[13], Callback)
			for _, value in reliable_event_queue[13] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[13] = {}
			return function()
				table.remove(reliable_events[13], table.find(reliable_events[13], Callback))
			end
		end,
	},
	CoinsAwarded = {
		On = function(Callback: (player: (Player), amount: (number), reason: (string)) -> ())
			table.insert(reliable_events[9], Callback)
			for _, value in reliable_event_queue[9] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[9] = {}
			return function()
				table.remove(reliable_events[9], table.find(reliable_events[9], Callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
